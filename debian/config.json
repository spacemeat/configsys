{
	"basics": {
		"vars": {
			"CS_PACKAGES": "'htop git tree vim wget curl xclip'",
			"CS_DOTDIR": "~/.bash.d"
		},
		"install": [ {
				"did": "htop --version && git --version && tree --version && vim --version && wget --version && curl --version && xclip -version",
				"do": [
					"sudo apt -y update && sudo apt -y upgrade",
					"sudo apt -y install ${CS_PACKAGES//\\'}"
				],
				"undo": "sudo apt -y remove ${CS_PACKAGES//\\'}"
			}, {
				"did": "[ -f ~/.bash_aliases ]",
				"do": "cp ./home/.bash_aliases ~",
				"undo": "rm ~/.bash_aliases"
			}, {
				"did": "[ -f ~/.vimrc ]",
				"do": "cp ./home/.vimrc ~",
				"undo": "rm ~/.vimrc"
			}, {
				"did": "[ -d $CS_DOTDIR ]",
				"do": "mkdir -p $CS_DOTDIR",
				"undo": "rmdir $CS_DOTDIR"
			}, {
				"did": "[ -f $CS_DOTDIR/ps1.sh ]",
				"do": "cp ./home/.bash.d/ps1.sh $CS_DOTDIR",
				"undo": "rm $CS_DOTDIR/ps1.sh"
			}, {
				"did": "[ -f $CS_DOTDIR/xclip.sh ]",
				"do": "cp ./home/.bash.d/xclip.sh $CS_DOTDIR",
				"undo": "rm $CS_DOTDIR/xclip.sh"
			}
		]
	},

	"nerdy fonts": {
		"vars": {
			"CS_FONT": "mononoki-nerd",
			"CS_FONTDIR": "~/.local/share/fonts/$CS_FONT",
			"CS_TMPFILE": "$CS_FONTDIR/$CS_FONT.zip",
			"CS_DLURL": "\"https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/Mononoki.zip\""
		},
		"install": [{
				"did": "[ -d $CS_FONTDIR ]",
				"do": "mkdir -p $CS_FONTDIR",
				"undo": "rm -r $CS_FONTDIR"
			}, {
				"did": "[ -f $CS_TMPFILE ]",
				"do": "wget -qO $CS_TMPFILE $CS_DLURL",
				"undo": "rm $CS_TMPFILE"
			}, {
				"did": "[ $(fc-list | grep \"$CS_FONT\" | wc -l) -gt 0 ]",
				"do": [
					"unzip $CS_TMPFILE -d $CS_FONTDIR",
					"sudo fc-cache -f $CS_FONTDIR"
				],
				"undo": [
					"find $CS_FONTDIR -type f ! -name \"$CS_FONT.zip\" -exec rm {} +",
					"fc-cache -f"
				]
			}
		]
	},

	"neovim": {
		"depens": ["nerdy fonts"],
		"vars": {
			"CS_DOTDIR": "~/.bash.d",
			"CS_INSTDIR": "~/neovim",
			"CS_CONFIGDIR": "~/.config/nvim",
			"CS_APPIMAGE": "$CS_INSTDIR/nvim.appimage",
			"CS_DLURL": "\"https://github.com/neovim/neovim/releases/latest/download/nvim.appimage\""
		},
		"install": [{
				"did": "[ -d $CS_INSTDIR ]",
				"do": "mkdir -p $CS_INSTDIR",
				"undo": "rm -rf $CS_INSTDIR"
			}, {
				"did": "[ $(apt list --installed ripgrep | grep \"ripgrep\" | wc -l) -ne 0 ]",
				"do": [
					"sudo apt -y update && sudo apt -y upgrade",
					"sudo apt -y install ripgrep"
				],
				"undo": "sudo apt -y remove ripgrep"
			}, {
				"did": "[ -f $CS_APPIMAGE ]",
				"do": "wget -qO $CS_APPIMAGE $CS_DLURL",
				"undo": "rm $CS_APPIMAGE"
			}, {
				"did": "[ -x $CS_APPIMAGE ]",
				"do": "chmod u+x $CS_APPIMAGE",
				"undo": "chmod u-x $CS_APPIMAGE"
			}, {
				"did": "[ -d $CS_CONFIGDIR ]",
				"do": "mkdir -p $CS_CONFIGDIR",
				"undo": "rm -rf $CS_CONFIGDIR"
			}, {
				"did": "[ -f $CS_CONFIGDIR/init.lua ]",
				"do": "cp -r ../neovim/* $CS_CONFIGDIR",
				"undo": "rm -r $CS_CONFIGDIR"
			}, {
				"did": "[ -f $CS_DOTDIR/neovim.sh ]",
				"do": "cp ./home/.bash.d/neovim.sh $CS_DOTDIR",
				"undo": "rm $CS_DOTDIR/neovim.sh"
			}
		]
	},

	"ssh for github": {
		"depends": [],
		"vars": {
			"CS_SSHDIR": "~/.ssh",
			"CS_ALG": "ed25519",
			"CS_FN": "id_$CS_ALG",
			"CS_PRVPATH": "$CS_SSHDIR/$CS_FN",
			"CS_PUBPATH": "$CS_SSHDIR/$CS_FN.pub",
			"CS_DEFPRVPATH": "$CS_SSHDIR/defunct_$CS_FN",
			"CS_DEFPUBPATH": "$CS_SSHDIR/defunct_$CS_FN.pub",
			"CS_GITHUBURL": "\"https://github.com/settings/keys\""
		},
		"install": [ {
				"did": "[ -e $CS_PUBPATH ]",
				"do": "echo \"Comment (email): \" && read SSHCOMMENT && ssh-keygen -t $CS_ALG -C \"$SSHCOMMENT\"",
				"undo": "mv $CS_PRVPATH $CS_DEFPRVPATH && mv $CS_PUBPATH $CS_DEFPUBPATH"
			}, {
				"did": "[ $(env | grep 'SSH_AUTH_SOCK' | wc -l) -gt 0 ]",
				"do": "eval \"$(ssh-agent -s)\"",
				"undo": ""
			} ,{
				"did": "[ $(ssh-add -L | grep \"ssh-$CS_ALG\" | wc -l) -gt 0 ]",
				"do": "ssh-add $CS_PRVPATH",
				"undo": "ssh-add -d $CS_PUBPATH"
			}, {
				"did": "[ -f $CS_PUBPATH ]",
				"do": [
					"cat $CS_PUBPATH | setclip",
					"xdg-open $CS_GITHUBURL"
				],
				"undo": "xdg-open $CS_GITHUBURL"
			}
		]
	},

	"flatpak": {
		"depends": [],
		"vars": {},
		"install": [ {
				"did": "[ $(apt list --installed flatpak | grep \"flatpak\" | wc -l) -ne 0 ]",
				"do": "sudo apt -y install flatpak",
				"undo": "sudo apt -y remove flatpak"
			}, {
				"did": "[ $(flatpak remotes | grep \"flathub\" | wc -l) -ne 0 ]",
				"do": "flatpak remote-add --user --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo",
				"udno": "flatpak remobe-remove flathub"
			}
		]
	},

	
	"firefox": {
		"depends": ["flatpak"],
			"install": [ {
				"did": "[ $(flatpak list --app | grep 'firefox' | wc -l) -ne 0 ]",
				"do": "flatpak install flathub org.mozilla.firefox",
				"undo": "flatpak uninstall org.mozilla.firefox"
			}
		]
	},

	"discord": {
		"notes": "Could be from flatpak",
		"depends": [],
		"vars": {},
		"install": [ {
				"did": "[ $(apt list --installed discord | grep \"discord\" | wc -l) -ne 0 ]",
				"do": "sudo apt -y install discord",
				"undo": "sudo apt -y remove discord"
			}
		]
	},

	"slack": {
		"notes": "Could be from flatpak",
		"depends": [],
		"vars": {},
		"install": [ {
				"did": "[ $(apt list --installed slack-desktop | grep \"slack-desktop\" | wc -l) -ne 0 ]",
				"do": "sudo apt -y install slack-desktop",
				"undo": "sudo apt -y remove slack-desktop"
			}
		]
	},

	"citybanner": {
		"depends": [],
		"vars": {
			"CS_DOTDIR": "~/.bash.d"
		},
		"install": [ {
				"did": "[ -d ~/citybanner ]",
				"do": "mkdir -p ~/citybanner",
				"undo": "rm -r ~/citybanner"
			}, {
				"did": "[ -f ~/citybanner/citybanner.py ]",
				"do": "cp -ru ../linux/citybanner/* ~/citybanner",
				"undo": "rm ~/citybanner/*"
			}, {
				"did": "[ -f $CS_DOTDIR/citybanner.sh ]",
				"do": "cp ./home/.bash.d/citybanner.sh $CS_DOTDIR",
				"undo": "rm $CS_DOTDIR/citybanner.sh"
			}
		]
	},

	"c-dev": {
		"depends": [],
		"vars": {
			"CS_DOTDIR": "~/.bash.d"
		},
		"install": [ {
				"did": "gcc --version",
				"do": [
					"sudo apt -y update && sudo apt -y upgrade",
					"sudo apt -y install build-essential clang cmake doxygen"
				],
				"undo": "sudo apt -y remove doxygen cmake clang build-essential"
			}, {
				"did": "[ -f ~/.gdbinit ]",
				"do": "cp ./home/.gdbinit ~",
				"undo": "rm ~/.gdbinit"
			}, {
				"did": "[ -f ~/.gdbinit_x ]",
				"do": "cp ./home/.gdbinit_x",
				"undo": "rm ~/.gdbinit_x"
			}, {
				"did": "[ -f $CS_DOTDIR/gdb.sh ]",
				"do": "cp ./home/.bash.d/gdb.sh $CS_DOTDIR",
				"undo": "rm $CS_DOTDIR/gdb.sh"
			}
		]
	},

	"geg": {
		"depends": ["basics", "c-dev"],
		"vars": {
			"CS_DOTDIR": "~/.bash.d"
		},
		"install": [ {
				"did": "[ -d ~/src/geg ]",
				"do": "mkdir -p ~/src/geg",
				"undo": "rm -r ~/src/geg"
			}, {
				"did": "[ -f ~/src/geg/LICENSE ]",
				"do": "git clone git@github.com:spacemeat/geg ~/src/geg",
				"undo": "rm -r ~/src/geg/*"
			}, {
				"did": "[ -f $CS_DOTDIR/geg.sh ]",
				"do": "cp ./home/.bash.d/geg.sh $CS_DOTDIR",
				"undo": "rm $CS_DOTDIR/geg.sh"
			}
		]
	},

	"python3": {
		"depends": [],
		"install": [ {
				"did": "[ $(apt list --installed python3-pip python3-venv | grep \"python3\" | wc -l) -ge 2 ]",
				"do": [
					"sudo apt -y update && sudo apt -y upgrade",
					"sudo apt -y install python3-pip python3-venv pylint"
				],
				"undo": "sudo apt -y remove pylint python3-venv python3-pip"
			}
		],
		"notes": "TODO: Source from more up-to-date place."
	},

	"lua": {
		"depends": [],
		"vars": {
			"CS_PKGNAME": "lua5.4"
		},
		"install": [ {
				"did": "[ $(apt list --installed $CS_PKGNAME | grep \"$CS_PKGNAME\" | wc -l) -ge 1 ]",
				"do": [
					"sudo apt -y update && sudo apt -y upgrade",
					"sudo apt -y install $CS_PKGNAME"
				],
				"undo": "sudo apt -y remove $CS_PKGNAME"
			}
		]
	},

	"nvm": {
		"depends": ["basics"],
		"vars": {
			"CS_DLURL": "\"https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh\""
		},
		"install": [ {
				"did": "[ -f ~/.nvm/LICENSE.md ]",
				"do": "curl -o- $CS_DLURL | bash",
				"undo": "rm -rf ~/.nvm"
			}, {
				"did": "[ $NVM_DIR ]",
				"do": "source ~/.bashrc",
				"undo": ""
			}
		]
	},

	"node": {
		"depends": ["nvm"],
		"install": [ {
				"did": "node --version",
				"do": "nvm install latest",
				"undo": "nvm uninstall latest"
			}
		]
	},

	"go": {
		"depends": [],
		"vars": {
			"CS_DOTDIR": "~/.bash.d",
			"CS_INSTDIR": "/usr/local",
			"CS_TMPPATH": "/tmp/golang.tar.gz",
			"CS_VERURL": "",
			"CS_DLURL": "\"https://go.dev/dl/go1.21.6.linux-amd64.tar.gz\"",
			"CS_DLVURL": "\"github.com/go-delve/delve/cmd/dlv@latest\""
		},
		"install": [ {
				"notes": "Need to get current version via scraping I guess",
				"did": "go version",
				"do": [
					"wget -qO $CS_TMPPATH $CS_DLURL",
					"tar -C $CS_INSTDIR -xzf $CS_TMPPATH",
					"rm $CS_TMPPATH"
				],
				"undo": [
					"rm -rf $CS_INSTDIR/go"
				]
			}, {
				"did": "dlv version",
				"do": "go install $CS_DLVURL",
				"undo": ""
			}, {
				"did": "[ -f $CS_DOTDIR/go.sh ]",
				"do": "cp ./home/.bash.d/go.sh $CS_DOTDIR",
				"undo": "rm $CS_DOTDIR/go.sh"
			}
		]
	},

	"all-lang-dev": {
		"depends": ["basics", "c-dev", "python3", "node"]
	},

	"vulkan-dev": {
		"depends": ["c-dev"],
		"vars": {
			"CS_PUBKEYURL": "\"https://packages.lunarg.com/lunarg-signing-key-pub.asc\"",
			"CS_PUBKEYPATH": "/etc/apt/trusted.gpg.d/lunarg.asc",
			"CS_SOURCESURL": "\"http://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list\"",
			"CS_SOURCESPATH": "/etc/apt/sources.list.d/lunarg-vulkan-jammy.list"
		},
		"install": [ {
				"did": "[ -f $CS_PUBKEYPATH ]",
				"do": "wget -qO- $CS_PUBKEYURL | sudo tee $CS_PUBKEYPATH",
				"undo": "sudo rm $CS_PUBKEYPATH"
			}, {
				"did": "[ -f $CS_SOURCESPATH ]",
				"do": "sudo wget -qO $SOURCESPATHt $CS_SOURCESURL",
				"undo": "sudo rm $CS_SOURCESPATH"
			}, {
				"did": "[ $(apt list --installed vulkan-sdk | grep \"vulkan-sdk\" | wc -l) -ne 0 ]",
				"do": [
					"sudo apt -y update && sudo apt -y upgrade",
					"sudo apt -y install vulkan-sdk"
				],
				"undo": "sudo apt -y remove vulkan-sdk"
			}
		]
	},

	"C++ fmt": {
		"depends": ["c-dev"],
		"vars": {
			"CS_VER": "10.2.0",
			"CS_DLURL": "\"https://github.com/fmtlib/fmt/releases/download/$CS_VER/fmt-$CS_VER.zip\"",
			"CS_TMP_PATH": "/tmp/fmt.zip",
			"CS_EXT_DIR": "~/src/fmt",
			"CS_DST_DIR": "$CS_EXT_DIR/fmt-$CS_VER"
		},
		"install": [ {
				"did": "[ -d $CS_EXT_DIR ]",
				"do": "mkdir -p $CS_EXT_DIR",
				"unod": "rmdir $CS_EXT_DIR"
			}, {
				"did": "[ -d $CS_DST_DIR ]",
				"do": [
					"sudo wget -qO $CS_TMP_PATH $CS_DLURL",
					"unzip $CS_TMP_PATH -d $CS_EXT_DIR",
					"rm $CS_TMP_PATH"
				],
				"undo": "rm -r $CS_DST_DIR/*"
			}, {
				"did": "[ -d $CS_DST_DIR/build ]",
				"do": "cd $CS_DST_DIR && mkdir build",
				"undo": "rm -r $CS_DST_DIR/build/*"
			}, {
				"did": "[ -f $CS_DST_DIR/build/Makefile ]",
				"do": "cd $CS_DST_DIR/build && cmake ..",
				"undo": "rm -r $CS_DST_DIR/build/*"
			}, {
				"did": "[ -f $CS_DST_DIR/build/libfmt.a ]",
				"do": "cd $CS_DST_DIR/build && make",
				"undo": "rm -r $CS_DST_DIR/build/*"
			}, {
				"did": "[ -f /usr/local/lib/libfmt.a ]",
				"do": "cd $CS_DST_DIR/build && sudo make install",
				"undo": "rm -r $CS_DST_DIR/build/*"
			}
		]
	},

	"humon": {
		"depends": ["C++ fmt"],
		"vars": {
			"CS_GITHUB": "git@github.com:spacemeat/humon.git",
			"CS_DST_DIR": "~/src/humon"
		},
		"install": [ {
				"did": "[ -d $CS_DST_DIR ]",
				"do": "mkdir -p $CS_DST_DIR",
				"undo": "rmdir $CS_DST_DIR"
			}, {
				"did": "[ -f $CS_DST_DIR/LICENSE ]",
				"do": "git clone $CS_GITHUB $CS_DST_DIR",
				"undo": "rm -r $CS_DST_DIR/*"
			}
		]
	},

	"humon-py": {
		"depends": ["humon"],
		"vars": {
			"CS_GITHUB": "git@github.com:spacemeat/humon-py.git",
			"CS_DST_DIR": "~/src/humon-py",
			"CS_VENV": "humon-py"
		},
		"install": [ {
				"did": "[ -d $CS_DST_DIR ]",
				"do": "mkdir -p $CS_DST_DIR",
				"undo": "rmdir $CS_DST_DIR"
			}, {
				"did": "[ -f $CS_DST_DIR/LICENSE ]",
				"do": "git clone $CS_GITHUB",
				"undo": "rm -r $CS_DST_DIR/*"
			}, {
				"did": "[ $VIRTUAL_ENV ]",
				"do": [
					"cd $CS_DST_DIR && python3 -m venv $CS_DST_DIR/.venv --prompt $CS_VENV && pip install -r requirements.txt"
				],
				"undo": [
					"rm -r $CS_DST_DIR/.venv"
				]
			}
		]
	},

	"boilermaker": {
		"depends": ["humon-py"],
		"vars": {
			"CS_GITHUB": "git@github.com:spacemeat/boilermaker.git",
			"CS_DST_DIR": "~/src/boilermaker",
			"CS_VENV": "boma"
		},
		"install": [ {
				"did": "[ -d $CS_DST_DIR ]",
				"do": "mkdir -p $CS_DST_DIR",
				"undo": "rmdir $CS_DST_DIR"
			}, {
				"did": "[ -f $CS_DST_DIR/LICENSE ]",
				"do": "git clone $CS_GITHUB",
				"undo": "rm -r $CS_DST_DIR/*"
			}, {
				"did": "[ $VIRTUAL_ENV ]",
				"do": [
					"cd $CS_DST_DIR && python3 -m venv .venv --prompt $CS_VIEW && pip install -e ../humon-py && pip install -r requirements.txt"
				],
				"undo": [
					"rm -r $CS_DST_DIR/.venv"
				]
			}
		]
	},

	"overground": {
		"depends": ["boilermaker"],
		"vars": {
			"CS_GITHUB": "git@github.com:spacemeat/og.git",
			"CS_DST_DIR": "~/src/og",
			"CS_VENV": "og"
		},
		"install": [ {
				"did": "[ -d $CS_DST_DIR ]",
				"do": "mkdir -p $CS_DST_DIR",
				"undo": "rmdir $CS_DST_DIR"
			}, {
				"did": "[ -f $CS_DST_DIR/LICENSE ]",
				"do": "git clone $CS_GITHUB",
				"undo": "rm -r $CS_DST_DIR/*"
			}, {
				"did": "[ $VIRTUAL_ENV ]",
				"do": [
					"cd $CS_DST_DIR && python3 -m venv .venv --prompt $CS_VIEW && pip install -e ../humon-py && pip install -e ../boilermaker && pip install -r requirements.txt"
				],
				"undo": [
					"rm -r $CS_DST_DIR/.venv"
				]
			}
		]
	}
}


