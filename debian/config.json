{
	"basics": {
		"install": [ {
				"did": "vim --version",
				"do": [
					"sudo apt -y update && sudo apt -y upgrade",
					"sudo apt -y install git tree vim wget curl xclip"
				],
				"undo": "sudo apt -y remove xclip curl wget vim tree git"
			}, {
				"did": "[ -f ~/.bash_aliases ]",
				"do": "cp ./home/.bash_aliases ~",
				"undo": "rm ~/.bash_aliases"
			}, {
				"did": "[ -f ~/.vimrc ]",
				"do": "cp ./home/.vimrc ~",
				"undo": "rm ~/.vimrc"
			}
		]
	},

	"nerdy fonts": {
		"vars": {
			"CS_FONTDIR": "~/.local/share/fonts/mononoki-nerd",
			"CS_TMPFILE": "/tmp/mononoki.zip",
			"CS_DLURL": "\"https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/Mononoki.zip\""
		},
		"install": [{
				"did": "[ -d $CS_FONTDIR ]",
				"do": "mkdir -p $CS_FONTDIR",
				"undo": "rm -rf $CS_FONTDIR"
			}, {
				"did": "[ $(fc-list | grep 'mononoki' | wc -l) -gt 0 ]",
				"do": [
					"wget -qO $CS_TMPFILE $CS_DLURL",
					"unzip $CS_TMPFILE -d S_FONTDIR",
					"rm $CS_TMPFILE",
					"sudo fc-cache -f $CS_FONTDIR"
				],
				"undo": [
					"rm $CS_FONTDIR/*",
					"fc-cache -f"
				]
			}
		]
	},

	"neovim": {
		"depens": ["nerdy fonts"],
		"vars": {
			"CS_INSTDIR": "~/neovim",
			"CS_CONFIGDIR": "~/.config/nvim",
			"CS_APPIMAGE": "$CS_INSTDIR/nvim.appimage",
			"CS_DLURL": "\"https://github.com/neovim/neovim/releases/latest/download/nvim.appimage\""
		},
		"install": [{
				"did": "[ -d $CS_INSTDIR ]",
				"do": "mkdir -p $CS_INSTDIR",
				"undo": "rm -rf $CS_INSTDIR"
			}, {
				"did": "[ $(apt list --installed ripgrep | grep \"ripgrep\" | wc -l) -ne 0 ]",
				"do": [
					"sudo apt -y update && sudo apt -y upgrade",
					"sudo apt -y install ripgrep"
				],
				"undo": "sudo apt -y remove ripgrep"
			}, {
				"did": "[ -f $CS_APPIMAGE ]",
				"do": "wget -qO $CS_APPIMAGE $CS_DLURL",
				"undo": "rm $CS_APPIMAGE"
			}, {
				"did": "[ -x $CS_APPIMAGE ]",
				"do": "chmod u+x $CS_APPIMAGE",
				"undo": "chmod u-x $CS_APPIMAGE"
			}, {
				"did": "[ -d $CS_CONFIGDIR ]",
				"do": "mkdir -p $CS_CONFIGDIR",
				"undo": "rm -rf $CS_CONFIGDIR"
			}, {
				"did": "[ -f $CS_CONFIGDIR/init.lua ]",
				"do": "cp -r ../neovim/* $CS_CONFIGDIR",
				"undo": "rm -r $CS_CONFIGDIR"
			}
		]
	},

	"generate SSH key for github, etc.": {
		"depends": [],
		"vars": {
			"CS_SSHDIR": "~/.ssh",
			"CS_ALG": "ed25519",
			"CS_FN": "id_$CS_ALG",
			"CS_PRVPATH": "$CS_SSHDIR/$CS_FN",
			"CS_PUBPATH": "$CS_SSHDIR/$CS_FN.pub",
			"CS_DEFPRVPATH": "$CS_SSHDIR/defunct_$CS_FN",
			"CS_DEFPUBPATH": "$CS_SSHDIR/defunct_$CS_FN.pub",
			"CS_GITHUBURL": "\"https://github.com/settings/keys\""
		},
		"install": [ {
				"did": "[ -e $CS_PUBPATH ]",
				"do": "echo \"Comment (email): \" && read SSHCOMMENT && ssh-keygen -t $CS_ALG -C \"$SSHCOMMENT\"",
				"undo": "mv $CS_PRVPATH $CS_DEFPRVPATH && mv $CS_PUBPATH $CS_DEFPUBPATH"
			}, {
				"did": "[ $(env | grep 'SSH_AUTH_SOCK' | wc -l) -gt 0 ]",
				"do": "eval \"$(ssh-agent -s)\"",
				"undo": ""
			} ,{
				"did": "[ $(ssh-add -L | grep \"ssh-$CS_ALG\" | wc -l) -gt 0 ]",
				"do": "ssh-add $CS_PRVPATH",
				"undo": "ssh-add -d $CS_PUBPATH"
			}, {
				"did": "[ -f $CS_PUBPATH ]",
				"do": [
					"cat $CS_PUBPATH | setclip",
					"xdg-open $CS_GITHUBURL"
				],
				"undo": "xdg-open $CS_GITHUBURL"
			}
		]
	},

	"discord": {
		"depends": [],
		"vars": {
			"CS_INSTDIR": "~/discord",
			"CS_TMPFILE": "$CS_INSTDIR/discord.deb",
			"CS_DLURL": "\"https://discordapp.com/api/download?platform=linux&format=deb\""
		},
		"install": [ {
				"did": "[ -d $CS_INSTDIR ]",
				"do": "mkdir -p $CS_INSTDIR",
				"undo": "rm -rf $CS_INSTDIR"
			}, {
				"did": "[ -f $CS_TMPFILE ]",
				"do": "wget -qO $CS_TMPFILE $CS_DLURL",
				"undo": "rm $CS_TMPFILE"
			}, {
				"did": "[ $(apt list --installed discord | grep \"discord\" | wc -l) -ne 0 ]",
				"do": "sudo apt -y install $CS_TMPFILE",
				"undo": "sudo apt -y remove discord"
			}
		]
	},

	"slack": {
		"depends": [],
		"vars": {
			"CS_INSTDIR": "~/slack",
			"CS_TMPFILE": "$CS_INSTDIR/slack.deb",
			"CS_VERURL": "\"https://slack.com/release-notes/linux\"",
			"CS_DLURL": "\"https://downloads.slack-edge.com/releases/linux/$SLACKVER/prod/x64/slack-desktop-$SLACKVER-amd64.deb\""
		},
		"install": [ {
				"did": "[ -d $CS_INSTDIR ]",
				"do": "mkdir -p $CS_INSTDIR",
				"undo": "rm -rf $CS_INSTDIR"
			}, {
				"did": "[ -f $CS_TMPFILE ]",
				"do": "SLACKVER=`wget -qO - $CS_VERURL | grep -Po 'Slack \\d+\\.\\d+\\.\\d+' | head -1 | grep -Po '\\d+\\.\\d+\\.\\d+'` && wget -qO $CS_TMPFILE $CS_DLURL",
				"undo": "rm $CS_TMPFILE"
			}, {
				"did": "[ $(apt list --installed slack-desktop | grep \"slack-desktop\" | wc -l) -ne 0 ]",
				"do": "sudo apt -y install $CS_TMPFILE",
				"undo": "sudo apt -y remove slack"
			}
		]
	},

	"citybanner": {
		"depends": [],
		"install": [ {
				"did": "",
				"do": "mkdir -p ~/citybanner",
				"undo": "rm -rf ~/citybanner"
			}, {
				"did": "[ -f ~/citybanner/citybanner.py ]",
				"do": "cp -ru ../linux/citybanner/* ~/citybanner",
				"undo": "rm ~/citybanner/*"
			}
		]
	},

	"c-dev": {
		"depends": [],
		"install": [ {
				"did": "gcc --version",
				"do": [
					"sudo apt -y update && sudo apt -y upgrade",
					"sudo apt -y install build-essential cmake"
				],
				"undo": "sudo apt -y remove cmake build-essential"
			}, {
				"did": "[ -f ~/.gdbinit ]",
				"do": "cp ./home/.gdbinit ~",
				"undo": "rm ~/.gdbinit"
			}, {
				"did": "[ -f ~/.gdbinit_x ]",
				"do": "cp ./home/.gdbinit_x",
				"undo": "rm ~/.gdbinit_x"
			}
		]

	},

	"geg": {
		"depends": ["basics", "c-dev"],
		"install": [ {
				"did": "[ -d ~/src/geg ]",
				"do": [
					"rm -f ~/src/geg",
					"mkdir -p ~/src/geg"
				],
				"undo": "rm -rf ~/src/geg"
			}, {
				"did": "[ -f ~/src/geg/LICENSE ]",
				"do": "git clone git@github.com:spacemeat/geg ~/src/geg",
				"undo": "rm ~/src/geg/*"
			}
		]
	},

	"python3": {
		"depends": [],
		"install": [ {
				"did": "[ $(apt list --installed python3-pip python3-venv | grep \"python3\" | wc -l) -ne 0 ]",
				"do": [
					"sudo apt -y updage && sudo apt -y upgrade",
					"sudo apt -y install python3-pip python3-venv"
				],
				"undo": "sudo apt -y remove python3-venv python3-pip"
			}
		],
		"notes": "TODO: Source from more up-to-date palce."
	},

	"nvm": {
		"depends": ["basics"],
		"vars": {
			"CS_DLURL": "\"https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh\""
		},
		"install": [ {
				"did": "[ -f ~/.nvm/LICENSE.md ]",
				"do": "curl -o- $CS_DLURL | bash",
				"undo": "rm -rf ~/.nvm"
			}, {
				"did": "",
				"do": "source ~/.bashrc",
				"undo": ""
			}
		]
	},

	"node": {
		"depends": ["nvm"],
		"install": [ {
				"did": "node --version",
				"do": "nvm install latest",
				"undo": "nvm uninstall latest"
			}
		]
	},

	"go": {
		"depends": [],
		"vars": {
			"CS_INSTDIR": "/usr/local",
			"CS_TMPPATH": "/tmp/golang.tar.gz",
			"CS_VERURL": "",
			"CS_DLURL": "\"https://go.dev/dl/go1.21.6.linux-amd64.tar.gz\"",
			"CS_DLVURL": "\"github.com/go-delve/delve/cmd/dlv@latest\""
		},
		"install": [ {
				"notes": "Need to get current version via scraping I guess",
				"did": "go version",
				"do": [
					"wget -qO $CS_TMPPATH $CS_DLURL",
					"tar -C $CS_INSTDIR -xzf $CS_TMPPATH",
					"rm $CS_TMPPATH"
				],
				"undo": [
					"rm -rf $CS_INSTDIR/go"
				]
			}, {
				"did": "dlv version",
				"do": "go install $CS_DLVURL",
				"undo": ""
			}
		]
	},

	"all-lang-dev": {
		"depends": ["basics", "c-dev", "python3", "node"]
	},

	"vulkan-dev": {
		"depends": ["c-dev"],
		"vars": {
			"CS_PUBKEYURL": "https://packages.lunarg.com/lunarg-signing-key-pub.asc",
			"CS_PUBKEYPATH": "/etc/apt/trusted.gpg.d/lunarg.asc",
			"CS_SOURCESURL": "http://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list",
			"CS_SOURCESPATH": "/etc/apt/sources.list.d/lunarg-vulkan-jammy.list"
		},
		"install": [ {
				"did": "",
				"do": "wget -qO- $CS_PUBKEYURL | sudo tee $CS_PUBKEYPATH",
				"undo": "sudo rm $CS_PUBKEYPATH"
			}, {
				"did": "",
				"do": "sudo wget -qO $SOURCESPATHt $CS_SOURCESURL",
				"undo": "sudo rm $CS_SOURCESPATH"
			}, {
				"did": "[ $(apt list --installed vulkan-sdk | grep \"vulkan-sdk\" | wc -l) -ne 0 ]",
				"do": [
					"sudo apt -y update && sudo apt -y upgrade",
					"sudo apt -y install vulkan-sdk"
				],
				"undo": "sudo apt -y remove vulkan-sdk"
			}
		]
	}
}

